{

      "fragments":[
         {
            "operators":[
               {
                  "argOperatorId":1,
                  "opName":"MyriaSplitConsumer",
                  "opType":"LocalMultiwayConsumer",
                  "opId":0
               },
               {
                  "opName":"MyriaStore(public:adhoc:mask1)",
                  "opType":"DbInsert",
                  "partitionFunction":null,
                  "argOverwriteTable":true,
                  "opId":2,
                  "argChild":0,
                  "relationKey":{
                     "userName":"public",
                     "programName":"adhoc",
                     "relationName":"mask1"
                  }
               }
            ]
         },
         {
            "operators":[
               {
                  "argOperatorId":4,
                  "opName":"MyriaCollectConsumer",
                  "opType":"CollectConsumer",
                  "opId":3
               },
               {
                  "argChild":3,
                  "aggregators":[
                     {
                        "emitters":[
                           {
                              "rootExpressionOperator":{
                                 "right":{
                                    "columnIdx":0,
                                    "type":"STATE"
                                 },
                                 "left":{
                                    "columnIdx":1,
                                    "type":"STATE"
                                 },
                                 "type": "PYUDF",
                                 "outputType":"BYTES_TYPE",
                                 "name":"mean"
                              },
                              "outputName":"uda0"
                           }
                        ],
                        "updaters":[
                           {
                              "rootExpressionOperator":{
                                 "right":{
                                    "valueType":"LONG_TYPE",
                                    "value":"1",
                                    "type":"CONSTANT"
                                 },
                                 "left":{
                                    "columnIdx":0,
                                    "type":"STATE"
                                 },
                                 "type":"PLUS"
                              },
                              "outputName":"_count__190"
                           },
                           {
                              "rootExpressionOperator":{
                                 "right":{
                                    "columnIdx":0,
                                    "type":"VARIABLE"
                                 },
                                 "left":{
                                    "columnIdx":1,
                                    "type":"STATE"
                                 },
                                 "type": "PYUDF",
                                 "outputType":"BYTES_TYPE",
                                 "name": "add"
                              },
                              "outputName":"_sum__191"
                           }
                        ],
                        "type":"UserDefined",
                        "initializers":[
                           {
                              "rootExpressionOperator":{
                                 "valueType":"LONG_TYPE",
                                 "value":"0",
                                 "type":"CONSTANT"
                              },
                              "outputName":"_count__190"
                           },
                           {
                              "rootExpressionOperator":{
                                 "valueType":"BYTES_TYPE",
                                 "value":"null",
                                 "type":"CONSTANT"
                              },
                              "outputName":"_sum__191"
                           }
                        ]
                     }
                  ],
                  "opType":"Aggregate",
                  "opName":"MyriaGroupBy(; UDA((_sum__191 / _count__190)))",
                  "opId":5
               },
               {
                  "argChild":5,
                  "opType":"LocalMultiwayProducer",
                  "opName":"MyriaSplitProducer",
                  "opId":1
               }
            ]
         },
         {
            "operators":[
               {
                  "opName":"MyriaScan(public:adhoc:Images)",
                  "opType":"TableScan",
                  "relationKey":{
                     "userName":"public",
                     "programName":"adhoc",
                     "relationName":"Images"
                  },
                  "opId":6
               },
               {
                  "argChild":6,
                  "opType":"Apply",
                  "opName":"MyriaApply(a=$0)",
                  "opId":7,
                  "emitExpressions":[
                     {
                        "rootExpressionOperator":{
                           "columnIdx":1,
                           "type":"VARIABLE"
                        },
                        "outputName":"image"
                     }
                  ]
               },
               {
                  "argChild":7,
                  "opType":"CollectProducer",
                  "opName":"MyriaCollectProducer(@None)",
                  "opId":4
               }
            ]
         }
      ],
      "logicalRa":"Store(public:adhoc:max_degree)[Apply(_COLUMN0_=$0)[GroupBy(; UDA((_sum__189 / _count__188)))[Apply(a=$0)[Scan(public:adhoc:TwitterK)]]]]",
      "rawQuery":"-- break ties by picking the first value\ndef pickval(value, arg, _value, _arg):\n    case when value >= _value then arg\n        else _arg end;\n\n\nuda ArgMax(val) {\n   -- init\n   [0 as _count, 0 as _sum];\n\n   -- update\n   [_count+1, _sum+val];\n\n   -- output\n   [_sum/_count];\n};\n\nT1 = [from scan(TwitterK) as t  emit ArgMax(t.a)];\nSTORE(T1, max_degree);",

      "language":"myrial"

}
